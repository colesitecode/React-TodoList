{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","ID","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAiDeA,MA9Cf,SAAkBC,GAAQ,IAAD,EACGC,mBAAUD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD7C,mBAChBC,EADgB,KACTC,EADS,KAGjBC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAAAC,GACnBP,EAASO,EAAEC,OAAOV,QAapB,OAEE,sBAAMW,UAAU,YAAYC,SAZT,SAAAH,GACnBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACbE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAERC,EAAS,KAKT,SACGL,EAAME,KAEL,qCACA,uBAAOY,UAAU,kBAAkBQ,KAAK,OAAOC,YAAY,aAC3DpB,MAAOC,EAAOoB,KAAK,OAAOC,SAAUd,EAAce,IAAKpB,IACvD,wBAAQQ,UAAU,mBAAmBQ,KAAK,GAA1C,uBAIA,qCACA,uBAAOR,UAAU,aAAaQ,KAAK,OAAOC,YAAY,aACtDpB,MAAOC,EAAOoB,KAAK,OAAOC,SAAUd,EAAce,IAAKpB,IACvD,wBAAQQ,UAAU,cAAcQ,KAAK,GAArC,4BCIOK,MAvCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EAEnC9B,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAJkD,mBAEpDD,EAFoD,KAE9C8B,EAF8C,KAc3D,OAAG9B,EAAKe,GACC,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SARV,SAAAZ,GACnB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACNC,GAAI,KACJ9B,MAAO,QAQJyB,EAAMM,KAAK,SAACC,EAAMC,GAAP,OAGhB,cADA,CACA,OAAKtB,UAAWqB,EAAKE,WAAa,oBAAsB,WAAxD,UAIA,qBAAmBC,QAAS,kBAAMT,EAAaM,EAAKlB,KAApD,SACGkB,EAAKd,MADEc,EAAKlB,IAIf,sBAAKH,UAAU,OAAf,UACE,cAAC,IAAD,CAAmBwB,QAAS,kBAAMR,EAAWK,EAAKlB,KAAKH,UAAU,gBACjE,cAAC,IAAD,CAAQwB,QAAS,kBAAMN,EAAQ,CAACf,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAAQP,UAAU,mBATxEsB,OC0BMG,MAlDf,WAAqB,IAAD,EACQtC,mBAAS,IADjB,mBACX2B,EADW,KACJY,EADI,KAsClB,OACE,gCACE,qDAEA,cAAC,EAAD,CAAUzB,SAtCE,SAAAoB,GACd,GAAKA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAApC,CAGA,IAAMqB,EAAQ,CAAIP,GAAJ,mBAAaP,IAC3BY,EAASE,OAkCP,cAAC,EAAD,CAAMd,MAAOA,EAAOC,aAfH,SAAAZ,GACnB,IAAI0B,EAAef,EAAMM,KAAI,SAAAC,GAI3B,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKE,YAAcF,EAAKE,YAEnBF,KAETK,EAASG,IASPb,WAvBe,SAAAb,GACjB,IAAM2B,EAAY,YAAIhB,GAAOiB,QAAO,SAAAV,GAAI,OAAIA,EAAKlB,KAAOA,KAExDuB,EAASI,IAoBiBb,WA/BT,SAACe,EAAQC,GACrBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAG5CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCXxDC,MARf,WACE,OACE,qBAAKpC,UAAU,WAAf,SACE,cAAC,EAAD,OCFNqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8e88ffa0.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState (props.edit ? props.edit.value : '');\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  })\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault(); //will no load the App when clicking the submit button\r\n\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000), //10000 is a random id for adding value to input\r\n      text: input\r\n    })\r\n    setInput('')\r\n  }\r\n\r\n  return (\r\n    \r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      {props.edit ? \r\n      (\r\n        <>\r\n        <input className=\"todo-input edit\" type=\"text\" placeholder=\"Add a todo\" \r\n        value={input} name=\"text\" onChange={handleChange} ref={inputRef} />\r\n        <button className=\"todo-button edit\" type=\"\">Update</button>\r\n        </>\r\n      ) :\r\n      (\r\n        <>\r\n        <input className=\"todo-input\" type=\"text\" placeholder=\"Add a todo\" \r\n        value={input} name=\"text\" onChange={handleChange} ref={inputRef} />\r\n        <button className=\"todo-button\" type=\"\">Add Todo</button>\r\n        </>\r\n      )}\r\n        \r\n    </form>\r\n    \r\n  )}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport {RiCloseCircleLine } from 'react-icons/ri'\r\nimport {TiEdit } from 'react-icons/ti'\r\nimport TodoForm from './TodoForm'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  })\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value)\r\n    setEdit({\r\n      ID: null,\r\n      value: ''\r\n    })\r\n  }\r\n  if(edit.id){\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n  }\r\n\r\n   \r\n  return todos.map ((todo, index) => (\r\n\r\n    // Change the background and text \r\n    <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n    key={index}>\r\n      \r\n    {/* OnClick div - will change the background and text if todo is completed*/}\r\n    <div key={todo.id} onClick={() => completeTodo(todo.id)} >\r\n      {todo.text}\r\n    </div>\r\n\r\n    <div className=\"icon\">\r\n      <RiCloseCircleLine onClick={() => removeTodo(todo.id)} className=\"delete-icon\" />\r\n      <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})} className=\"edit-icon\" />\r\n    </div>\r\n\r\n    </div>\r\n  ))\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm';\r\n\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  //ADD\r\n  const addTodo = todo => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) { //will not add if the Input is empty || or if you will just add space\r\n      return;\r\n    }\r\n    const newTodos = [todo, ...todos]\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  //EDIT\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n  }\r\n\r\n  //DELETE\r\n  const removeTodo = id => {\r\n    const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n    setTodos(removeArr)\r\n  }\r\n\r\n  //UPDATE\r\n  const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n      if (todo.id === id){\r\n        todo.isComplete = !todo.isComplete\r\n      }\r\n      return todo;\r\n    })\r\n    setTodos(updatedTodos);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Your Todo for Today</h1>\r\n    \r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo todos={todos} completeTodo={completeTodo} \r\n      removeTodo={removeTodo} updateTodo={updateTodo} />\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}